import React, { useState, useEffect, useRef } from 'react';
import './App.css';

const ChatGPTClone = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [outputType, setOutputType] = useState('text');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  const pollJobStatus = async (jobId, messageIndex) => {
    const interval = 5000; // Poll every 5 seconds
    const poller = setInterval(async () => {
      try {
        const response = await fetch(`https://irvinehacks25.onrender.com/api/status/${jobId}`);
        const data = await response.json();

        if (data.status === 'completed') {
          clearInterval(poller);
          setMessages((prevMessages) => {
            const updatedMessages = [...prevMessages];
            updatedMessages[messageIndex] = {
              ...updatedMessages[messageIndex],
              fileUrl: data.file_url,
              status: 'completed',
            };
            return updatedMessages;
          });
        }
      } catch (error) {
        console.error('Error polling job status:', error);
        clearInterval(poller);
      }
    }, interval);
  };

  const fetchResponse = async (userMessage) => {
    try {
      const response = await fetch('https://irvinehacks25.onrender.com/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ medium: outputType, prompt: userMessage }),
      });
      const data = await response.json();
      return { textResponse: data.text_response, fileUrl: data.file_url, jobId: data.job_id };
    } catch (error) {
      console.error('Error fetching response from API:', error);
      return { textResponse: 'Sorry, there was an error with the server.', fileUrl: null, jobId: null };
    }
  };

  const handleSendMessage = async () => {
    if (input.trim() === '') return;

    setMessages((prev) => [...prev, { sender: 'user', text: input, type: 'text' }]);
    setInput('');
    setIsLoading(true);

    const { textResponse, fileUrl, jobId } = await fetchResponse(input);

    const newMessage = {
      sender: 'bot',
      text: textResponse,
      fileUrl: fileUrl || null,
      type: outputType,
      status: jobId ? 'pending' : 'completed',
      jobId: jobId || null,
    };

    setMessages((prev) => [...prev, newMessage]);

    if (jobId) {
      pollJobStatus(jobId, messages.length);
    }

    setIsLoading(false);
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, isLoading]);

  useEffect(() => {
    setMessages([
      {
        sender: 'bot',
        text: 'Hello! I\'m Dr. LeBonbon. How can I assist you today?',
        type: 'text',
        status: 'completed',
      },
    ]);
  }, []);

  const renderMedia = (message) => {
    if (!message.fileUrl) {
      return <p className="text-sm text-gray-500">Processing {message.type}...</p>;
    }

    if (message.type === 'audio') {
      return (
        <audio controls className="w-full">
          <source src={message.fileUrl} type="audio/mp3" />
          Your browser does not support the audio element.
        </audio>
      );
    }

    if (message.type === 'video') {
      return (
        <video controls className="w-full">
          <source src={message.fileUrl} type="video/mp4" />
          Your browser does not support the video element.
        </video>
      );
    }

    return null;
  };

  return (
    <div className="min-h-screen flex" style={{ backgroundImage: 'url("/lebron_solodunk.jpg")' }}>
      <div className="w-64 bg-gradient-to-b from-yellow-500 to-purple-700 text-white flex flex-col items-center p-4 fixed h-full">
        <h1 className="text-2xl font-bold mb-6">Your LeTherapist</h1>
      </div>

      <div className="flex-1 flex flex-col ml-64">
        <div className="flex-1 overflow-y-auto p-7 space-y-4">
          {messages.map((message, index) => (
            <div key={index} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`p-4 rounded-lg max-w-xl ${message.sender === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-black'}`}>
                <p>{message.text}</p>
                {message.type !== 'text' && renderMedia(message)}
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>

        <div className="p-4 bg-white fixed bottom-0 w-full">
          <div className="flex">
            <input
              type="text"
              className="flex-1 border rounded-lg p-3"
              placeholder="Type your message..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}
            />
            <button className="ml-4 bg-blue-500 text-white px-4 py-2 rounded-lg" onClick={handleSendMessage}>
              Send
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatGPTClone;



{messages.map((message, index) => (
            <div
              key={index}
              className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`${message.sender === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-300 text-black'} px-4 py-2 rounded-lg max-w-2xl`}
              >
                {message.text}
                {/* {(message.fileUrl && outputType === 'audio' && (
                  <div className="mt-4">
                    <audio controls className="w-full">
                      <source src={message.fileUrl} type="audio/mp3" />
                      Your browser does not support the audio element.
                    </audio>
                  </div>
                )) ||  */}
                {message.fileUrl && (outputType === 'video' || outputType === 'audio') && (
                  <div className="mt-4">
                    {/* <video controls className="w-full">
                      <source src={message.fileUrl} type="video/mp4" />
                      Your browser does not support the video element.
                    </video> */}
                    <Media outputType={outputType} fileUrl={message.fileUrl} />
                  </div>
                )}
                {/* {message.jobId && !message.completed && (
                  <p className="text-sm text-gray-500 mt-2">Processing video...</p>
                )} */}
                
              </div>
            </div>
          ))}